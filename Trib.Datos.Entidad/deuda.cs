//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Trib.Datos.Entidad
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(contribuyente))]
    [KnownType(typeof(tipopersona))]
    [KnownType(typeof(documento))]
    public partial class deuda: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int iddeuda
        {
            get { return _iddeuda; }
            set
            {
                if (_iddeuda != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'iddeuda' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iddeuda = value;
                    OnPropertyChanged("iddeuda");
                }
            }
        }
        private int _iddeuda;
    
        [DataMember]
        public int idcontribuyente
        {
            get { return _idcontribuyente; }
            set
            {
                if (_idcontribuyente != value)
                {
                    ChangeTracker.RecordOriginalValue("idcontribuyente", _idcontribuyente);
                    if (!IsDeserializing)
                    {
                        if (contribuyente != null && contribuyente.idcontribuyente != value)
                        {
                            contribuyente = null;
                        }
                    }
                    _idcontribuyente = value;
                    OnPropertyChanged("idcontribuyente");
                }
            }
        }
        private int _idcontribuyente;
    
        [DataMember]
        public int idtipopersona
        {
            get { return _idtipopersona; }
            set
            {
                if (_idtipopersona != value)
                {
                    ChangeTracker.RecordOriginalValue("idtipopersona", _idtipopersona);
                    if (!IsDeserializing)
                    {
                        if (tipopersona != null && tipopersona.idtipopersona != value)
                        {
                            tipopersona = null;
                        }
                    }
                    _idtipopersona = value;
                    OnPropertyChanged("idtipopersona");
                }
            }
        }
        private int _idtipopersona;
    
        [DataMember]
        public int iddocumento
        {
            get { return _iddocumento; }
            set
            {
                if (_iddocumento != value)
                {
                    ChangeTracker.RecordOriginalValue("iddocumento", _iddocumento);
                    if (!IsDeserializing)
                    {
                        if (documento != null && documento.iddocumento != value)
                        {
                            documento = null;
                        }
                    }
                    _iddocumento = value;
                    OnPropertyChanged("iddocumento");
                }
            }
        }
        private int _iddocumento;
    
        [DataMember]
        public System.DateTime periodotributario
        {
            get { return _periodotributario; }
            set
            {
                if (_periodotributario != value)
                {
                    _periodotributario = value;
                    OnPropertyChanged("periodotributario");
                }
            }
        }
        private System.DateTime _periodotributario;
    
        [DataMember]
        public int codigotributario
        {
            get { return _codigotributario; }
            set
            {
                if (_codigotributario != value)
                {
                    _codigotributario = value;
                    OnPropertyChanged("codigotributario");
                }
            }
        }
        private int _codigotributario;
    
        [DataMember]
        public string resolucion
        {
            get { return _resolucion; }
            set
            {
                if (_resolucion != value)
                {
                    _resolucion = value;
                    OnPropertyChanged("resolucion");
                }
            }
        }
        private string _resolucion;
    
        [DataMember]
        public decimal importepagar
        {
            get { return _importepagar; }
            set
            {
                if (_importepagar != value)
                {
                    _importepagar = value;
                    OnPropertyChanged("importepagar");
                }
            }
        }
        private decimal _importepagar;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public contribuyente contribuyente
        {
            get { return _contribuyente; }
            set
            {
                if (!ReferenceEquals(_contribuyente, value))
                {
                    var previousValue = _contribuyente;
                    _contribuyente = value;
                    Fixupcontribuyente(previousValue);
                    OnNavigationPropertyChanged("contribuyente");
                }
            }
        }
        private contribuyente _contribuyente;
    
        [DataMember]
        public tipopersona tipopersona
        {
            get { return _tipopersona; }
            set
            {
                if (!ReferenceEquals(_tipopersona, value))
                {
                    var previousValue = _tipopersona;
                    _tipopersona = value;
                    Fixuptipopersona(previousValue);
                    OnNavigationPropertyChanged("tipopersona");
                }
            }
        }
        private tipopersona _tipopersona;
    
        [DataMember]
        public documento documento
        {
            get { return _documento; }
            set
            {
                if (!ReferenceEquals(_documento, value))
                {
                    var previousValue = _documento;
                    _documento = value;
                    Fixupdocumento(previousValue);
                    OnNavigationPropertyChanged("documento");
                }
            }
        }
        private documento _documento;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            contribuyente = null;
            tipopersona = null;
            documento = null;
        }

        #endregion
        #region Association Fixup
    
        private void Fixupcontribuyente(contribuyente previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.deuda.Contains(this))
            {
                previousValue.deuda.Remove(this);
            }
    
            if (contribuyente != null)
            {
                if (!contribuyente.deuda.Contains(this))
                {
                    contribuyente.deuda.Add(this);
                }
    
                idcontribuyente = contribuyente.idcontribuyente;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("contribuyente")
                    && (ChangeTracker.OriginalValues["contribuyente"] == contribuyente))
                {
                    ChangeTracker.OriginalValues.Remove("contribuyente");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("contribuyente", previousValue);
                }
                if (contribuyente != null && !contribuyente.ChangeTracker.ChangeTrackingEnabled)
                {
                    contribuyente.StartTracking();
                }
            }
        }
    
        private void Fixuptipopersona(tipopersona previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.deuda.Contains(this))
            {
                previousValue.deuda.Remove(this);
            }
    
            if (tipopersona != null)
            {
                if (!tipopersona.deuda.Contains(this))
                {
                    tipopersona.deuda.Add(this);
                }
    
                idtipopersona = tipopersona.idtipopersona;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("tipopersona")
                    && (ChangeTracker.OriginalValues["tipopersona"] == tipopersona))
                {
                    ChangeTracker.OriginalValues.Remove("tipopersona");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("tipopersona", previousValue);
                }
                if (tipopersona != null && !tipopersona.ChangeTracker.ChangeTrackingEnabled)
                {
                    tipopersona.StartTracking();
                }
            }
        }
    
        private void Fixupdocumento(documento previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.deuda.Contains(this))
            {
                previousValue.deuda.Remove(this);
            }
    
            if (documento != null)
            {
                if (!documento.deuda.Contains(this))
                {
                    documento.deuda.Add(this);
                }
    
                iddocumento = documento.iddocumento;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("documento")
                    && (ChangeTracker.OriginalValues["documento"] == documento))
                {
                    ChangeTracker.OriginalValues.Remove("documento");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("documento", previousValue);
                }
                if (documento != null && !documento.ChangeTracker.ChangeTrackingEnabled)
                {
                    documento.StartTracking();
                }
            }
        }

        #endregion
    }
}
